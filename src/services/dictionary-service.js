const fs = require('fs-extra');
const path = require('path');

/**
 * Dictionary Service - Handles dictionary loading and word validation
 * Implements Single Responsibility Principle
 */
class DictionaryService {
    constructor() {
        this.dictionary = new Set(); // Use Set for O(1) lookup
        this.dictionaryPath = path.join(process.cwd(), 'tudien');
        this.isLoaded = false;
    }

    /**
     * Load dictionary from tudien folder
     * Filters only 2-word phrases
     */
    async loadDictionary() {
        try {
            console.log('üìö ƒêang t·∫£i t·ª´ ƒëi·ªÉn...');
            
            if (!await fs.pathExists(this.dictionaryPath)) {
                console.warn('‚ö†Ô∏è Th∆∞ m·ª•c tudien kh√¥ng t·ªìn t·∫°i, t·∫°o m·ªõi...');
                await fs.ensureDir(this.dictionaryPath);
                await this.createSampleDictionary();
            }

            const files = await fs.readdir(this.dictionaryPath);
            const txtFiles = files.filter(file => file.endsWith('.txt'));

            if (txtFiles.length === 0) {
                console.warn('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file t·ª´ ƒëi·ªÉn, t·∫°o file m·∫´u...');
                await this.createSampleDictionary();
                txtFiles.push('vietdict.txt');
            }

            let totalWords = 0;
            for (const file of txtFiles) {
                const filePath = path.join(this.dictionaryPath, file);
                const content = await fs.readFile(filePath, 'utf-8');
                const lines = content.split('\n').map(line => line.trim()).filter(Boolean);
                
                for (const line of lines) {
                    const words = this.normalizeVietnamese(line).split(/\s+/);
                    if (words.length === 2) {
                        this.dictionary.add(line.toLowerCase());
                        totalWords++;
                    }
                }
            }

            this.isLoaded = true;
            console.log(`‚úÖ ƒê√£ t·∫£i ${totalWords} c·ª•m t·ª´ t·ª´ ${txtFiles.length} file(s)`);
        } catch (error) {
            console.error('‚ùå L·ªói khi t·∫£i t·ª´ ƒëi·ªÉn:', error);
            throw error;
        }
    }

    /**
     * Create a sample dictionary file if none exists
     */
    async createSampleDictionary() {
        const sampleWords = [
            'xanh l√°', 'l√° c√¢y', 'c√¢y cao', 'cao r√°o', 'r√°o ri·∫øt',
            'ri·∫øt m√¨nh', 'm√¨nh t√¥i', 't√¥i ƒë√¢y', 'ƒë√¢y r·ªìi', 'r·ªìi sao',
            'sao ƒë√¢y', 'ƒë√¢y ƒë√≥', 'ƒë√≥ ƒë√¢y', 'ƒë√¢y k√¨a', 'k√¨a n√†y',
            'n√†y n·ªç', 'n·ªç kia', 'kia n√†y', 'n√†y r·ªìi', 'r·ªìi nh√©',
            'nh√© anh', 'anh ∆°i', '∆°i l√†', 'l√† g√¨', 'g√¨ ƒë√¢y',
            'ƒë√¢y m√†', 'm√† sao', 'sao v·∫≠y', 'v·∫≠y √†', '√† ·ªßa',
            '·ªßa g√¨', 'g√¨ v·∫≠y', 'v·∫≠y th√¥i', 'th√¥i ƒë∆∞·ª£c', 'ƒë∆∞·ª£c r·ªìi',
            'lung linh', 'linh tinh', 'tinh ngh·ªãch', 'ngh·ªãch ng·ª£m', 'ng·ª£m t√≠nh',
            't√≠nh to√°n', 'to√°n h·ªçc', 'h·ªçc h√†nh', 'h√†nh ƒë·ªông', 'ƒë·ªông l·ª±c',
            'l·ª±c l∆∞·ª£ng', 'l∆∞·ª£ng t·ª´', 't·ª´ ng·ªØ', 'ng·ªØ ph√°p', 'ph√°p lu·∫≠t'
        ];

        const filePath = path.join(this.dictionaryPath, 'vietdict.txt');
        await fs.writeFile(filePath, sampleWords.join('\n'), 'utf-8');
        console.log('‚úÖ ƒê√£ t·∫°o file t·ª´ ƒëi·ªÉn m·∫´u');
    }

    /**
     * Normalize Vietnamese text for better matching
     */
    normalizeVietnamese(text) {
        return text.trim().replace(/\s+/g, ' ');
    }

    /**
     * Check if a word pair exists in dictionary
     */
    isValidWordPair(wordPair) {
        if (!this.isLoaded) {
            throw new Error('Dictionary not loaded yet');
        }
        return this.dictionary.has(wordPair.toLowerCase());
    }

    /**
     * Get all word pairs that start with a specific word
     */
    getWordPairsStartingWith(word) {
        if (!this.isLoaded) return [];
        
        const results = [];
        const searchTerm = word.toLowerCase();
        
        for (const wordPair of this.dictionary) {
            const words = wordPair.split(' ');
            if (words[0] === searchTerm) {
                results.push(wordPair);
            }
        }
        
        return results;
    }

    /**
     * Get a random word pair from dictionary
     */
    getRandomWordPair() {
        if (!this.isLoaded || this.dictionary.size === 0) {
            throw new Error('Dictionary not available');
        }
        
        const wordPairs = Array.from(this.dictionary);
        const randomIndex = Math.floor(Math.random() * wordPairs.length);
        return wordPairs[randomIndex];
    }

    /**
     * Get dictionary size
     */
    getDictionarySize() {
        return this.dictionary.size;
    }
}

module.exports = DictionaryService;