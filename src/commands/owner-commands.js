/**
 * Owner Commands Handler
 * Implements Interface Segregation Principle - only owner-specific commands
 */
class OwnerCommands {
    constructor(gameService, helpService, statsService) {
        this.gameService = gameService;
        this.helpService = helpService;
        this.statsService = statsService;
        
        this.commands = new Set([
            'setnoitu', 'setmaxhelp', 'givehelp', 'resethistory', 
            'forcenew', 'togglewords', 'setcooldown', 'stats'
        ]);
    }

    /**
     * Check if command exists
     */
    hasCommand(command) {
        return this.commands.has(command);
    }

    /**
     * Execute slash command
     */
    async executeSlashCommand(command, interaction, guildId) {
        switch (command) {
            case 'setnoitu':
                await this.handleSetNoiTuSlashCommand(interaction, guildId);
                break;
            case 'setmaxhelp':
                await this.handleSetMaxHelpSlashCommand(interaction, guildId);
                break;
            case 'givehelp':
                await this.handleGiveHelpSlashCommand(interaction, guildId);
                break;
            case 'resethistory':
                await this.handleResetHistoryCommand(interaction, guildId);
                break;
            case 'forcenew':
                await this.handleForceNewCommand(interaction, guildId);
                break;
            case 'togglewords':
                await this.handleToggleWordsSlashCommand(interaction, guildId);
                break;
            case 'setcooldown':
                await this.handleSetCooldownSlashCommand(interaction, guildId);
                break;
            case 'stats':
                await this.handleStatsCommand(interaction, guildId);
                break;
            default:
                await interaction.reply({ content: '‚ùì L·ªánh owner kh√¥ng h·ª£p l·ªá!' });
        }
    }

    /**
     * Execute owner command
     */
    async executeCommand(command, message, args, guildId) {
        switch (command) {
            case 'setnoitu':
                await this.handleSetNoiTuCommand(message, args, guildId);
                break;
            case 'setmaxhelp':
                await this.handleSetMaxHelpCommand(message, args, guildId);
                break;
            case 'givehelp':
                await this.handleGiveHelpCommand(message, args, guildId);
                break;
            case 'resethistory':
                await this.handleResetHistoryCommand(message, guildId);
                break;
            case 'forcenew':
                await this.handleForceNewCommand(message, guildId);
                break;
            case 'togglewords':
                await this.handleToggleWordsCommand(message, args, guildId);
                break;
            case 'setcooldown':
                await this.handleSetCooldownCommand(message, args, guildId);
                break;
            case 'stats':
                await this.handleStatsCommand(message, guildId);
                break;
            default:
                await message.reply('‚ùì L·ªánh owner kh√¥ng h·ª£p l·ªá!');
        }
    }

    /**
     * Handle /setnoitu slash command
     */
    async handleSetNoiTuSlashCommand(interaction, guildId) {
        try {
            const channel = interaction.options.getChannel('channel');
            
            if (!channel) {
                await interaction.reply({ content: '‚ùå Kh√¥ng t√¨m th·∫•y k√™nh!' });
                return;
            }

            this.gameService.setGameChannelId(channel.id, guildId);
            await interaction.reply({ content: `‚úÖ ƒê√£ thi·∫øt l·∫≠p k√™nh n·ªëi t·ª´: ${channel}` });
            
            // Start new game in the channel
            const newWord = this.gameService.startNewGame(guildId);
            await channel.send(`üéØ Tr√≤ ch∆°i n·ªëi t·ª´ b·∫Øt ƒë·∫ßu! T·ª´ ƒë·∫ßu ti√™n: **${newWord}**`);
        } catch (error) {
            console.error('Set noitu slash command error:', error);
            await interaction.reply({ content: '‚ùå C√≥ l·ªói x·∫£y ra khi thi·∫øt l·∫≠p k√™nh!' });
        }
    }

    /**
     * Handle /setnoitu command
     */
    async handleSetNoiTuCommand(message, args, guildId) {
        try {
            if (args.length < 2) {
                await message.reply('‚ùå S·ª≠ d·ª•ng: `/setnoitu channel:#t√™n-k√™nh`');
                return;
            }

            const channelMention = args[1];
            const channelMatch = channelMention.match(/^channel:<#(\d+)>$/) || channelMention.match(/^<#(\d+)>$/);
            
            if (!channelMatch) {
                await message.reply('‚ùå ƒê·ªãnh d·∫°ng kh√¥ng ƒë√∫ng. S·ª≠ d·ª•ng: `/setnoitu channel:#t√™n-k√™nh`');
                return;
            }

            const channelId = channelMatch[1];
            const channel = message.guild.channels.cache.get(channelId);
            
            if (!channel) {
                await message.reply('‚ùå Kh√¥ng t√¨m th·∫•y k√™nh!');
                return;
            }

            this.gameService.setGameChannelId(channelId, guildId);
            await message.reply(`‚úÖ ƒê√£ thi·∫øt l·∫≠p k√™nh n·ªëi t·ª´: ${channel}`);
            
            // Start new game in the channel
            const newWord = this.gameService.startNewGame(guildId);
            await channel.send(`üéØ Tr√≤ ch∆°i n·ªëi t·ª´ b·∫Øt ƒë·∫ßu! T·ª´ ƒë·∫ßu ti√™n: **${newWord}**`);
        } catch (error) {
            console.error('Set noitu command error:', error);
            await message.reply('‚ùå C√≥ l·ªói x·∫£y ra khi thi·∫øt l·∫≠p k√™nh!');
        }
    }

    /**
     * Handle /setmaxhelp slash command
     */
    async handleSetMaxHelpSlashCommand(interaction, guildId) {
        try {
            const maxHelp = interaction.options.getInteger('amount');
            
            if (maxHelp < 1) {
                await interaction.reply({ content: '‚ùå S·ªë l∆∞·ª£t tr·ª£ gi√∫p ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng!' });
                return;
            }

            await this.helpService.setMaxHelpPerDay(maxHelp);
            await interaction.reply({ content: `‚úÖ ƒê√£ ƒë·∫∑t s·ªë l∆∞·ª£t tr·ª£ gi√∫p t·ªëi ƒëa/ng√†y: **${maxHelp}**` });
        } catch (error) {
            console.error('Set max help slash command error:', error);
            await interaction.reply({ content: '‚ùå C√≥ l·ªói x·∫£y ra khi thi·∫øt l·∫≠p!' });
        }
    }

    /**
     * Handle /setmaxhelp command
     */
    async handleSetMaxHelpCommand(message, args, guildId) {
        try {
            if (args.length < 2) {
                await message.reply('‚ùå S·ª≠ d·ª•ng: `/setmaxhelp <s·ªë>`');
                return;
            }

            const maxHelp = parseInt(args[1]);
            if (isNaN(maxHelp) || maxHelp < 1) {
                await message.reply('‚ùå S·ªë l∆∞·ª£t tr·ª£ gi√∫p ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng!');
                return;
            }

            await this.helpService.setMaxHelpPerDay(maxHelp);
            await message.reply(`‚úÖ ƒê√£ ƒë·∫∑t s·ªë l∆∞·ª£t tr·ª£ gi√∫p t·ªëi ƒëa/ng√†y: **${maxHelp}**`);
        } catch (error) {
            console.error('Set max help command error:', error);
            await message.reply('‚ùå C√≥ l·ªói x·∫£y ra khi thi·∫øt l·∫≠p!');
        }
    }

    /**
     * Handle /givehelp slash command
     */
    async handleGiveHelpSlashCommand(interaction, guildId) {
        try {
            const user = interaction.options.getUser('user');
            const amount = interaction.options.getInteger('amount');
            
            if (amount < 1) {
                await interaction.reply({ content: '‚ùå S·ªë l∆∞·ª£ng ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng!' });
                return;
            }

            await this.helpService.giveHelp(user.id, amount);
            await interaction.reply({ content: `‚úÖ ƒê√£ t·∫∑ng **${amount}** l∆∞·ª£t tr·ª£ gi√∫p cho ${user}!` });
        } catch (error) {
            console.error('Give help slash command error:', error);
            await interaction.reply({ content: '‚ùå C√≥ l·ªói x·∫£y ra khi t·∫∑ng tr·ª£ gi√∫p!' });
        }
    }

    /**
     * Handle /givehelp command
     */
    async handleGiveHelpCommand(message, args, guildId) {
        try {
            if (args.length < 3) {
                await message.reply('‚ùå S·ª≠ d·ª•ng: `/givehelp @user <s·ªë>`');
                return;
            }

            const userMention = args[1];
            const amount = parseInt(args[2]);
            
            const userMatch = userMention.match(/^<@!?(\d+)>$/);
            if (!userMatch) {
                await message.reply('‚ùå Ph·∫£i mention (@) m·ªôt user!');
                return;
            }

            if (isNaN(amount) || amount < 1) {
                await message.reply('‚ùå S·ªë l∆∞·ª£ng ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng!');
                return;
            }

            const userId = userMatch[1];
            const user = await message.client.users.fetch(userId);
            
            await this.helpService.giveHelp(userId, amount);
            await message.reply(`‚úÖ ƒê√£ t·∫∑ng **${amount}** l∆∞·ª£t tr·ª£ gi√∫p cho ${user}!`);
        } catch (error) {
            console.error('Give help command error:', error);
            await message.reply('‚ùå C√≥ l·ªói x·∫£y ra khi t·∫∑ng tr·ª£ gi√∫p!');
        }
    }

    /**
     * Handle /resethistory command
     */
    async handleResetHistoryCommand(context, guildId) {
        try {
            this.gameService.resetHistory(guildId);
            await this.statsService.incrementGameResets();
            
            await context.reply('‚úÖ ƒê√£ x√≥a l·ªãch s·ª≠ c·ª•m t·ª´ trong v√°n hi·ªán t·∫°i!');
        } catch (error) {
            console.error('Reset history command error:', error);
            await context.reply('‚ùå C√≥ l·ªói x·∫£y ra khi reset l·ªãch s·ª≠!');
        }
    }

    /**
     * Handle /forcenew command
     */
    async handleForceNewCommand(context, guildId) {
        try {
            const newWord = this.gameService.startNewGame(guildId);
            await this.statsService.incrementGamesPlayed();
            
            const channelId = this.gameService.getGameChannelId(guildId);
            if (channelId) {
                const guild = context.guild || context.message?.guild;
                const channel = guild?.channels.cache.get(channelId);
                if (channel) {
                    await channel.send(`üéØ V√°n m·ªõi ƒë∆∞·ª£c b·∫Øt ƒë·∫ßu b·ªüi Owner! T·ª´ ƒë·∫ßu ti√™n: **${newWord}**`);
                }
            }
            
            await context.reply('‚úÖ ƒê√£ b·∫Øt ƒë·∫ßu v√°n m·ªõi!');
        } catch (error) {
            console.error('Force new command error:', error);
            await context.reply('‚ùå C√≥ l·ªói x·∫£y ra khi b·∫Øt ƒë·∫ßu v√°n m·ªõi!');
        }
    }

    /**
     * Handle /togglewords slash command
     */
    async handleToggleWordsSlashCommand(interaction, guildId) {
        try {
            const setting = interaction.options.getString('setting');
            const enabled = setting === 'on';
            
            this.gameService.toggleDuplicateCheck(enabled, guildId);
            
            const status = enabled ? '‚úÖ B·∫¨T' : '‚ùå T·∫ÆT';
            await interaction.reply({ content: `${status} ki·ªÉm tra tr√πng l·∫∑p c·ª•m t·ª´!` });
        } catch (error) {
            console.error('Toggle words slash command error:', error);
            await interaction.reply({ content: '‚ùå C√≥ l·ªói x·∫£y ra khi thay ƒë·ªïi c√†i ƒë·∫∑t!' });
        }
    }

    /**
     * Handle /togglewords command
     */
    async handleToggleWordsCommand(message, args, guildId) {
        try {
            if (args.length < 2) {
                await message.reply('‚ùå S·ª≠ d·ª•ng: `/togglewords on/off`');
                return;
            }

            const setting = args[1].toLowerCase();
            if (setting !== 'on' && setting !== 'off') {
                await message.reply('‚ùå Ch·ªâ ch·∫•p nh·∫≠n `on` ho·∫∑c `off`!');
                return;
            }

            const enabled = setting === 'on';
            this.gameService.toggleDuplicateCheck(enabled, guildId);
            
            const status = enabled ? '‚úÖ B·∫¨T' : '‚ùå T·∫ÆT';
            await message.reply(`${status} ki·ªÉm tra tr√πng l·∫∑p c·ª•m t·ª´!`);
        } catch (error) {
            console.error('Toggle words command error:', error);
            await message.reply('‚ùå C√≥ l·ªói x·∫£y ra khi thay ƒë·ªïi c√†i ƒë·∫∑t!');
        }
    }

    /**
     * Handle /setcooldown slash command
     */
    async handleSetCooldownSlashCommand(interaction, guildId) {
        try {
            const seconds = interaction.options.getInteger('seconds');
            
            if (seconds < 0) {
                await interaction.reply({ content: '‚ùå Th·ªùi gian ph·∫£i l√† s·ªë nguy√™n kh√¥ng √¢m!' });
                return;
            }

            this.gameService.setCooldownTime(seconds, guildId);
            await interaction.reply({ content: `‚úÖ ƒê√£ ƒë·∫∑t th·ªùi gian ch·ªù: **${seconds}** gi√¢y` });
        } catch (error) {
            console.error('Set cooldown slash command error:', error);
            await interaction.reply({ content: '‚ùå C√≥ l·ªói x·∫£y ra khi thi·∫øt l·∫≠p cooldown!' });
        }
    }

    /**
     * Handle /setcooldown command
     */
    async handleSetCooldownCommand(message, args, guildId) {
        try {
            if (args.length < 2) {
                await message.reply('‚ùå S·ª≠ d·ª•ng: `/setcooldown <gi√¢y>`');
                return;
            }

            const seconds = parseInt(args[1]);
            if (isNaN(seconds) || seconds < 0) {
                await message.reply('‚ùå Th·ªùi gian ph·∫£i l√† s·ªë nguy√™n kh√¥ng √¢m!');
                return;
            }

            this.gameService.setCooldownTime(seconds, guildId);
            await message.reply(`‚úÖ ƒê√£ ƒë·∫∑t th·ªùi gian ch·ªù: **${seconds}** gi√¢y`);
        } catch (error) {
            console.error('Set cooldown command error:', error);
            await message.reply('‚ùå C√≥ l·ªói x·∫£y ra khi thi·∫øt l·∫≠p cooldown!');
        }
    }

    /**
     * Handle /stats command
     */
    async handleStatsCommand(context, guildId) {
        try {
            const gameStats = this.gameService.getGameStats(guildId);
            const allStats = this.statsService.getAllStats();
            const helpStats = this.helpService.getHelpStats();
            const activeGuilds = this.gameService.getActiveGuildsCount();

            const embed = {
                title: 'üìä Th·ªëng K√™ Bot N·ªëi T·ª´',
                color: 0x00ff00,
                fields: [
                    {
                        name: 'üéÆ Tr·∫°ng th√°i game',
                        value: `T·ª´ hi·ªán t·∫°i: **${gameStats.currentWord || 'Ch∆∞a b·∫Øt ƒë·∫ßu'}**\n` +
                               `T·ª´ ƒë√£ d√πng: **${gameStats.usedWordPairsCount}**\n` +
                               `T·ª´ ƒëi·ªÉn: **${gameStats.dictionarySize}** c·ª•m t·ª´\n` +
                               `Ki·ªÉm tra tr√πng: **${gameStats.checkDuplicates ? 'B·∫≠t' : 'T·∫Øt'}**\n` +
                               `Cooldown: **${gameStats.cooldownTime}s**`,
                        inline: true
                    },
                    {
                        name: 'üìà Th·ªëng k√™ h√¥m nay',
                        value: `T·ª´ ƒë√£ n·ªëi: **${allStats.today.wordsToday}**\n` +
                               `Ng∆∞·ªùi d√πng tr·ª£ gi√∫p: **${helpStats.totalUsersToday}**\n` +
                               `Tr·ª£ gi√∫p ƒë√£ d√πng: **${helpStats.totalHelpUsedToday}**`,
                        inline: true
                    },
                    {
                        name: 'üèÜ T·ªïng quan',
                        value: `V√°n ƒë√£ ch∆°i: **${allStats.allTime.gamesPlayed}**\n` +
                               `L·∫ßn reset: **${allStats.allTime.gameResets}**\n` +
                               `T·ª´ tu·∫ßn n√†y: **${allStats.thisWeek.totalWords}**\n` +
                               `Server ƒëang ch∆°i: **${activeGuilds}**`,
                        inline: true
                    }
                ],
                timestamp: new Date(),
                footer: {
                    text: 'Bot N·ªëi T·ª´ Vi·ªát Nam üáªüá≥'
                }
            };

            await context.reply({ embeds: [embed] });
        } catch (error) {
            console.error('Stats command error:', error);
            await context.reply('‚ùå C√≥ l·ªói x·∫£y ra khi l·∫•y th·ªëng k√™!');
        }
    }
}

module.exports = OwnerCommands;