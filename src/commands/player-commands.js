/**
 * Player Commands Handler
 * Implements Interface Segregation Principle - only player-specific commands
 */
class PlayerCommands {
    constructor(helpService, gameService, statsService) {
        this.helpService = helpService;
        this.gameService = gameService;
        this.statsService = statsService;
        
        this.commands = new Set(['help', 'checkhelp']);
    }

    /**
     * Check if command exists
     */
    hasCommand(command) {
        return this.commands.has(command);
    }

    /**
     * Execute slash command
     */
    async executeSlashCommand(command, interaction, guildId) {
        switch (command) {
            case 'help':
                await this.handleHelpCommand(interaction, guildId);
                break;
            case 'checkhelp':
                await this.handleCheckHelpCommand(interaction, guildId);
                break;
            default:
                await interaction.reply({ content: '‚ùì L·ªánh kh√¥ng h·ª£p l·ªá!' });
        }
    }

    /**
     * Execute player command
     */
    async executeCommand(command, message, args, guildId) {
        switch (command) {
            case 'help':
                await this.handleHelpCommand(message, guildId);
                break;
            case 'checkhelp':
                await this.handleCheckHelpCommand(message, guildId);
                break;
            default:
                await message.reply('‚ùì L·ªánh kh√¥ng h·ª£p l·ªá!');
        }
    }

    /**
     * Handle /help command - provide game hint
     */
    async handleHelpCommand(context, guildId) {
        try {
            const userId = context.user?.id || context.author?.id;
            
            // Check if user can use help
            if (!this.helpService.canUseHelp(userId)) {
                await context.reply('‚ùå B·∫°n ƒë√£ d√πng h·∫øt l∆∞·ª£t tr·ª£ gi√∫p h√¥m nay. H√£y quay l·∫°i sau 00:00 nh√©!');
                return;
            }

            // Get hint
            const hint = this.gameService.getHint(guildId);
            if (!hint) {
                // Auto-skip: Start new game when no valid words found
                const gameChannelId = this.gameService.getGameChannelId(guildId);
                const newWord = this.gameService.startNewGame(guildId);
                await this.statsService.incrementGamesPlayed();
                
                // Notify in game channel if available
                if (gameChannelId) {
                    try {
                        // Get channel from context (works for both message and interaction)
                        const guild = context.guild || context.message?.guild;
                        if (guild) {
                            const channel = guild.channels.cache.get(gameChannelId);
                            if (channel) {
                                await channel.send(
                                    `üîÑ Kh√¥ng c√≤n t·ª´ n√†o h·ª£p l·ªá ƒë·ªÉ n·ªëi ti·∫øp! Bot t·ª± ƒë·ªông b·∫Øt ƒë·∫ßu v√°n m·ªõi.\n` +
                                    `üéØ T·ª´ m·ªõi: **${newWord}**`
                                );
                            }
                        }
                    } catch (error) {
                        console.error('Error sending auto-restart message:', error);
                    }
                }
                
                // Reply to user who used /help
                await context.reply({
                    content: 'üîÑ Kh√¥ng c√≥ g·ª£i √Ω kh·∫£ d·ª•ng, bot ƒë√£ t·ª± ƒë·ªông b·∫Øt ƒë·∫ßu v√°n m·ªõi! H√£y ki·ªÉm tra k√™nh ch∆°i ƒë·ªÉ xem t·ª´ m·ªõi.',
                    flags: context.user ? [require('discord.js').InteractionResponseFlags.Ephemeral] : undefined
                });
                return;
            }

            // Use help
            const success = await this.helpService.useHelp(userId);
            if (!success) {
                await context.reply('‚ùå Kh√¥ng th·ªÉ s·ª≠ d·ª•ng tr·ª£ gi√∫p l√∫c n√†y!');
                return;
            }

            // Send hint
            const remainingHelp = this.helpService.getRemainingHelp(userId);
            await context.reply(
                `üí° G·ª£i √Ω: **${hint}**\n` +
                `üìä C√≤n l·∫°i: ${remainingHelp.remaining}/${remainingHelp.total} l∆∞·ª£t tr·ª£ gi√∫p h√¥m nay.`
            );
        } catch (error) {
            console.error('Help command error:', error);
            await context.reply('‚ùå C√≥ l·ªói x·∫£y ra khi l·∫•y g·ª£i √Ω!');
        }
    }

    /**
     * Handle /checkhelp command - show remaining help count
     */
    async handleCheckHelpCommand(context, guildId) {
        try {
            const userId = context.user?.id || context.author?.id;
            const helpInfo = this.helpService.getRemainingHelp(userId);
            
            await context.reply(
                `üìä B·∫°n c√≤n **${helpInfo.remaining}/${helpInfo.total}** l∆∞·ª£t tr·ª£ gi√∫p h√¥m nay.\n` +
                `üåô L∆∞·ª£t s·∫Ω ƒë∆∞·ª£c l√†m m·ªõi v√†o 00:00 (gi·ªù Vi·ªát Nam).`
            );
        } catch (error) {
            console.error('Check help command error:', error);
            await context.reply('‚ùå C√≥ l·ªói x·∫£y ra khi ki·ªÉm tra tr·ª£ gi√∫p!');
        }
    }
}

module.exports = PlayerCommands;